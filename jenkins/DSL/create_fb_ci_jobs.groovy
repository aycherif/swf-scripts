def organization = 'exoplatform'
def contentApi = new URL("https://api.github.com/orgs/${organization}/repos?type=source&per_page=100")
def projects = new groovy.json.JsonSlurper().parse(contentApi.newReader())
def DSL_JOB_NAME = 'infra-dsl-plf43-social-rdbms-fb-ci-jobs'

def jobAuthorizationGroup = 'exo-profile-plf-release-manager'
def jobOrganization = 'exodev'
def jobJDK = 'Oracle Java SDK 1.7.0 64bits'
def jobLabel = 'ci'
def jobNameSuffix = 'fb-ci'
def jobScm = 'H * * * *'
def jobCron = 'H 13 * * 6'
def branchPrefix = 'feature'
def featureBranchName = 'social-rdbms'

def maven30 = 'maven-3.0.x'
def maven32 = 'maven-3.2.x'

def plfMavenGoals = 'install -Pexo-release -Dmaven.test.skip=true'
def cfMavenGoals = 'install -Prelease,run-all'
def gateinMavenGoals = 'install -Pjboss-release,release,bundle -Dgatein.dev=tomcat7 -Dservers.dir=${WORKSPACE} -Dexo.projects.directory.dependencies=${WORKSPACE} -Pdownload'

def plfProjects = [ 'calendar': '4.3.x-social-rdbms',  'wiki': '4.3.x-social-rdbms',  'platform-ui': '4.3.x-social-rdbms',  'commons': '4.3.x-social-rdbms',  'social': '4.3.x-social-rdbms',  'ecms': '4.3.x-social-rdbms',  'forum': '4.3.x-social-rdbms',  'integration': '4.3.x-social-rdbms',  'platform': '4.3.x-social-rdbms',  'platform-public-distributions': '4.3.x-social-rdbms' ]
def cfProjects = [ 'n/a': 'n/a']


projects.each {

    if (plfProjects.containsKey(it.name) || cfProjects.containsKey(it.name)) {
        // All projects attributes
        def projectName = it.name
        def gitURL = it.git_url
        def htmlURL = it.html_url
        def projectVersion = ''
        if (plfProjects.containsKey(it.name)){
          projectVersion = plfProjects["${projectName}"]
        } else {
          projectVersion = cfProjects["${projectName}"]
        }

        // Syntax for  CI Jobs
        mavenJob("${projectName}-${featureBranchName}-${jobNameSuffix}") {
            description("<b><span style='color:red'>DO NOT EDIT HERE!</span></b> <br/> Job generated by Groovy DSL @ <a href='https://ci.exoplatform.org/job/${DSL_JOB_NAME}'>${DSL_JOB_NAME}</a>")

            logRotator(15, 15)

            authorization {
                permission('hudson.model.Item.Read', 'anonymous')
                permission('hudson.model.Item.Build', "${jobAuthorizationGroup}")
            }
          
            jdk("${jobJDK}")

            properties {
                githubProjectUrl("${htmlURL}")
                label("${jobLabel}")
            }

            triggers {
                snapshotDependencies(true)
                githubPush()
                scm("${jobScm}")
                cron("${jobCron}")
            }

            scm {
                git {
                    remote {
                        if (projectName == 'platform-public-distributions'){
                          github("${organization}/${projectName}", 'ssh')
                        } else{
                          github("${jobOrganization}/${projectName}", 'ssh')
                        }
                    }
                    branch("origin/${branchPrefix}/${featureBranchName}")

                    // Additional Behaviours
                    relativeTargetDir("sources")
                    createTag(true)
                    clean(true)
                    pruneBranches(true)
                    localBranch("${branchPrefix}/${featureBranchName}")

                }

            }
            if (cfProjects.containsKey(projectName)){
              mavenInstallation("maven-3.0.x")
            }
          	else{
              mavenInstallation("maven-3.2.x")
            }
            rootPOM("sources/pom.xml")
          
           if (cfProjects.containsKey(projectName)){
             if (projectName == 'gatein-portal'){
                goals("${gateinMavenGoals}")
             }
             else{
                goals("${cfMavenGoals}")
             }
           }
           else {
             goals("${plfMavenGoals}")
           }

            wrappers {
                timeout {
                    absolute(120)
                    failBuild()
                    writeDescription('Build timed out (after {0} minutes). Marking the build as failed.')
                }
            }

            postBuildSteps('FAILURE') {
                publishers {
                    deployArtifacts {
                        uniqueVersion(true)
                    }
                    mavenDeploymentLinker('.*zip$')
                    allowBrokenBuildClaiming()
                    extendedEmail('exo-swf-notifications@exoplatform.com', '$DEFAULT_SUBJECT', '$DEFAULT_CONTENT')

                    //
                    configure { project ->
                        project / 'publishers' << 'hudson.plugins.jira.JiraIssueUpdater'(plugin: 'jira@1.39')
                    }
                }
            }
        }

    }
}