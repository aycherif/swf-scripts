name: PLF PR Task Webhook

on:
  workflow_call:
    inputs:
      TARGET_SERVER:
        description: Target Server (tribe or builders)
        default: 'tribe'
        required: false
        type: string
    secrets:
      SERVER_USERNAME:
        required: true
      SERVER_PASSWORD:
        required: true
      SERVER_TASK_REST_PREFIXE_URL:
        required: true
      SERVER_GAMGH_CONNECTOR_REST_URL:
        required: true
permissions:
  pull-requests: write
        
env:
  message: ${{ github.event.pull_request.title }}
  state: ${{ github.event.pull_request.state }}
  pull_number: ${{ github.event.pull_request.number }}
  requested_reviewer: ${{ github.event.requested_reviewer.login }}
  creator: ${{ github.event.pull_request.user.login }}
  repo_name: ${{ github.event.repository.full_name }}
  base_branch_name: ${{ github.event.pull_request.base.ref }}
jobs:
  check_tasks:
    name: Check for tasks identifiers
    runs-on: ubuntu-latest
    steps:
      - name: PLF Tasks Webhook
        run: |
          case ${{ inputs.TARGET_SERVER }} in
            tribe)
              regexFilter='(task|maint|exo)((-|_)[0-9]{4,})+'
              portalSite='dw'
              ;;

            builders)
              regexFilter='meed((-|_)[0-9]{2,})+'
              portalSite='meeds'
              ;;

            *)
              echo "Error target Server ${{ inputs.TARGET_SERVER }} is not yet supported!"
              exit 1
            ;;
          esac 
          doCurl() {
            curl -A "eXo Webhook Tasks/1.0" -s -f -L -u ${SERVER_USERNAME}:${SERVER_PASSWORD} -XGET $*
          }
          SERVER_URL="https://$(echo $SERVER_TASK_REST_PREFIXE_URL | awk -F/ '{print $3}')"
          TASKS_IDS="$(echo ${message:-}| grep -ioP ${regexFilter} | grep -oP [0-9]+ | xargs)"
          if [ -z "${TASKS_IDS}" ]; then
            echo "No tasks found! Abort."
            exit 0
          fi
          echo "OK Task(s) found! Starting notifications..."
          link="PR <a href=\"https://github.com/${repo_name}/pull/${pull_number}\">${repo_name}#${pull_number}</a>"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            if [ "${{ github.event.action }}" = "review_requested" ]; then
              serverUser=$(doGetCurl "${SERVER_GAMGH_CONNECTOR_REST_URL}/users/${requested_reviewer}" || echo "")
              if [ ! -z "${serverUser}" ]; then
                echo "Requested reviewer is: ${serverUser}."
                msg="üí≠ $link requested a review from @${serverUser} "
              else
                echo "Could not get Server user identifier! Abort"
                exit 0
              fi
            elif [ "${{ github.event.pull_request.merged }}" = "true" ]; then
              mergedCommitlink="<a href=\"https://github.com/${repo_name}/commit/${{ github.event.pull_request.merge_commit_sha }}\">merged</a>"
              base_branch_link="<a href=\"https://github.com/${repo_name}/tree/${base_branch_name}\">${base_branch_name}</a>"
              mergerGithubUser="${{ github.event.pull_request.merged_by.login }}"
              mergerServerUser=$(doGetCurl "${SERVER_GAMGH_CONNECTOR_REST_URL}/users/${mergerGithubUser}" || echo "")
              mergerServerProfile=$(doGetCurl "${SERVER_URL}/rest/private/v1/social/users/${mergerServerUser}" 2>/dev/null || echo "")
              mergerServerFullName="$(echo ${mergerServerProfile} | jq .fullname | tr -d '\"' || echo "")"
              mergerServerLink="<a target=\"_self\" rel=\"noopener\" href=\"/portal/${portalSite}/profile/${mergerServerUser}\" class=\"user-suggester\">${mergerServerFullName}</a>"
              if [ -z "${mergerServerFullName:-}" ]; then 
                msg="üåü $link has been ${mergedCommitlink} into ${base_branch_link}."
              else
                msg="üåü $link has been ${mergedCommitlink} into ${base_branch_link} by ${mergerServerLink}."
              fi
            elif [ "${{ github.event.action }}" = "closed" ]; then
              msg="üçÇ $link has been ${{ github.event.action }}."
            elif [ "${{ github.event.action }}" = "opened" ]; then
              msg="üå± $link has been created."
            elif [ "${{ github.event.action }}" = "reopened" ]; then
              msg="üçÉ $link has been ${{ github.event.action }}."
            else
              msg="‚ÑπÔ∏è $link has been ${{ github.event.action }}."
            fi
          elif [ "${{ github.event_name }}" = "pull_request_review" ] && [ "${{ github.event.action }}" = "submitted" ]; then
            mentionCreator=""
            commentMentionFilterRegex='( |^)@[a-zA-Z0-9]+-?[a-zA-Z0-9]+( |$)'
            response=$(doGetCurl "${SERVER_GAMGH_CONNECTOR_REST_URL}/users/${creator}" || echo "")
            [ -z "${response}" ] || mentionCreator=" FYI @${response} "
            reviewerGithubUser="${{ github.event.review.user.login }}"
            reviewerServerUser=$(doGetCurl "${SERVER_GAMGH_CONNECTOR_REST_URL}/users/${reviewerGithubUser}" || echo "")
            reviewerServerProfile=$(doGetCurl "${SERVER_URL}/rest/private/v1/social/users/${reviewerServerUser}" 2>/dev/null || echo "")
            reviewerServerFullName="$(echo ${reviewerServerProfile} | jq .fullname | tr -d '\"' || echo "")"
            reviewerServerLink="<a target=\"_self\" rel=\"noopener\" href=\"/portal/${portalSite}/profile/${reviewerServerUser}\" class=\"user-suggester\">${reviewerServerFullName}</a>"
            reviewEventLink="${{ github.event.review.html_url }}"
            if [ "${{ github.event.review.state }}" = "changes_requested" ]; then
              requestChangesEventLink="<a href=\"$reviewEventLink\">changes</a>"
              if [ -z "${reviewerServerFullName:-}" ]; then 
                msg="üõ†Ô∏è $link requires ${requestChangesEventLink}.${mentionCreator}"
              else 
                msg="üõ†Ô∏è $link requires ${requestChangesEventLink} from ${reviewerServerLink}.${mentionCreator}"
              fi
            elif [ "${{ github.event.review.state }}" = "approved" ]; then
              approvedEventLink="<a href=\"$reviewEventLink\">approved</a>"
              if [ -z "${reviewerServerFullName:-}" ]; then 
                msg="‚úÖ $link has been ${approvedEventLink}.${mentionCreator}"
              else 
                msg="‚úÖ $link has been ${approvedEventLink} by ${reviewerServerLink}.${mentionCreator}"
              fi
            elif [ "${{ github.event.review.state }}" = "commented" ] && [[ "${{ github.event.review.body }}" =~ $commentMentionFilterRegex ]]; then
              mentionEventLink="<a href=\"$reviewEventLink\">mentioned</a>"
              mentionedGithubUsers=$(echo "${{ github.event.review.body }}" | grep -oP "$commentMentionFilterRegex" | tr -d '@' | xargs)
              mentionedServerUsers=""
              for mentionedGithubUser in ${mentionedGithubUsers}; do 
                response=$(doGetCurl "${SERVER_GAMGH_CONNECTOR_REST_URL}/users/${mentionedGithubUser}" || echo "")
                [ -z "${response}" ] && continue
                [ -z "${mentionedServerUsers}" ] && mentionedServerUsers="@${response}" || mentionedServerUsers="${mentionedServerUsers} and @${response}"
              done
              [ -z "${mentionedServerUsers}" ] && mentionedServerUsers="$(echo $mentionedGithubUsers | wc -w ) user(s)"
              msg="üôã $link has ${mentionEventLink} ${mentionedServerUsers} in a comment."
            else
              stateEventLink="<a href=\"$reviewEventLink\">${{ github.event.review.state }}</a>"
              msg="‚ÑπÔ∏è $link has been ${stateEventLink}."
            fi
          fi
          echo "*** Message is:"
          echo ${msg}
          echo "***"
          for TASK_ID in ${TASKS_IDS}; do
            echo "Commenting to Task #${TASK_ID}..."
            curl -so /dev/null -w '%{http_code}' -L -u ${SERVER_USERNAME}:${SERVER_PASSWORD} -XPOST --data-raw "<p>${msg}</p>" "${SERVER_TASK_REST_PREFIXE_URL}/comments/${TASK_ID}"
          done
        env:
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          SERVER_TASK_REST_PREFIXE_URL: ${{ secrets.SERVER_TASK_REST_PREFIXE_URL }}
          SERVER_GAMGH_CONNECTOR_REST_URL: ${{ secrets.SERVER_GAMGH_CONNECTOR_REST_URL }}
  assign-author:
    name: Assign Pull Request Author
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'opened' }}
    steps:
      - uses: toshimaru/auto-author-assign@v1.6.1         